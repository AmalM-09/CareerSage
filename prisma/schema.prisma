// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(uuid())
  clerkUserId  String      @unique
  email        String      @unique
  name         String?
  imageUrl     String?
  industry     String?
  industryInsight IndustryInsight? @relation(fields:[industry], references:[industry])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  //profile fields
  bio          String?
  experience   Int?
  skills       String[]
  age          Int? 

  assessments  Assessment[]
  resume       Resume?

  SkillPath SkillPath?

}

model Assessment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  quizScore       Float    // Overall quiz score
  questions       Json[]     // Array of {question, answer, userAnswer, isCorrect}
  category        String   // "Technical", "Behavioral", etc.
  improvementTip  String?  // AI-generated improvement tip
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model SkillPath {
  id                 String   @id @default(cuid())
  userId             String   @unique
  recommendedSkills  String[] // Array of recommended skills
  learningPath       String[] // Array of learning steps
  resources          String[] // Array of learning resources
  personalizedAdvice String?  // Optional personalized advice
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relation to User
  user User @relation(fields: [userId], references: [id])
}




model Resume{
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  content         String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model IndustryInsight {
  id            String    @id @default(cuid())
  industry      String    @unique
  subIndustry   String?

  users         User[]
  salaryRanges  Json[]
  growthRate    Float
  demandLevel   DemandLevel
  topSkills     String[]

  marketOutlook MarketOutlook
  keyTrends     String[]

  recommendedSkills String[]

  lastUpdated    DateTime @default(now())
  nextUpdated    DateTime

   @@index([industry])
  

}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}